import ta_salesforce_reports_declare

import os
import sys
import time
import datetime

import modinput_wrapper.base_modinput
from solnlib.packages.splunklib import modularinput as smi



import input_module_salesforce_report as input_module


'''
    Do not edit this file!!!
    This file is generated by Add-on builder automatically.
    Add your modular input logic to file input_module_salesforce_report.py
'''
class ModInputsalesforce_report(modinput_wrapper.base_modinput.BaseModInput):

    def __init__(self):
        if 'use_single_instance_mode' in dir(input_module):
            use_single_instance = input_module.use_single_instance_mode()
        else:
            use_single_instance = False
        super(ModInputsalesforce_report, self).__init__("ta_salesforce_reports", "salesforce_report", use_single_instance)
        self.global_checkbox_fields = None

    def get_scheme(self):
        """overloaded splunklib modularinput method"""
        scheme = super(ModInputsalesforce_report, self).get_scheme()
        scheme.title = ("Salesforce Report")
        scheme.description = ("Retrieves a specified report via Salesforce.com REST Analytics API.")
        scheme.use_external_validation = True
        scheme.streaming_mode_xml = True

        scheme.add_argument(smi.Argument("name", title="Name",
                                         description="",
                                         required_on_create=True))

        """
        For customized inputs, hard code the arguments here to hide argument detail from users.
        For other input types, arguments should be get from input_module. Defining new input types could be easier.
        """
        scheme.add_argument(smi.Argument("username", title="Username",
                                         description="Salesforce login username or email.",
                                         required_on_create=True,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("password", title="Password",
                                         description="Salesforce login password.",
                                         required_on_create=True,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("security_token", title="Security Token",
                                         description="User\'s security token (see Salesforce documentation).",
                                         required_on_create=True,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("report_id", title="Salesforce Report ID",
                                         description="https://na1.salesforce.com/[REPORT_ID]",
                                         required_on_create=True,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("enable_indexing", title="Enable Indexing",
                                         description="Write records to specified index.",
                                         required_on_create=False,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("enable_kvstore", title="Enable KVStore",
                                         description="Write records to specified kvstore.",
                                         required_on_create=False,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("enable_lookup_configuration", title="Enable Lookup Configuration",
                                         description="Creates and updates a lookup (knowledge object) and updates fields if \"Enable KVStore\" is enabled. Defaults to input name if undefined. (Requires Enable KVStore)",
                                         required_on_create=False,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("kvstore", title="KVStore",
                                         description="If enabled, kvstore name to write returned records. Defaults to input name if undefined.  (CAUTION: Using same kvstore in multiple inputs may inadvertently corrupt data.)",
                                         required_on_create=False,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("kvstore_key", title="KVStore Key Fieldname",
                                         description="Fieldname in returned results to be used to as unique record identifier (_key). Defaults to \'none\', which may result in duplicate records if not purge not enabled. (Requires Enable KVStore)",
                                         required_on_create=False,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("enable_purge", title="Enable Purge",
                                         description="Deletes all records in the kvstore at each update.  Use if no unique record is returned to use as key, you do not desire to maintain historical records, or you are unsure how records are returned.",
                                         required_on_create=False,
                                         required_on_edit=False))
        return scheme

    def get_app_name(self):
        return "TA-Salesforce_Reports"

    def validate_input(self, definition):
        """validate the input stanza"""
        input_module.validate_input(self, definition)

    def collect_events(self, ew):
        """write out the events"""
        input_module.collect_events(self, ew)

    def get_account_fields(self):
        account_fields = []
        return account_fields

    def get_checkbox_fields(self):
        checkbox_fields = []
        checkbox_fields.append("enable_indexing")
        checkbox_fields.append("enable_kvstore")
        checkbox_fields.append("enable_lookup_configuration")
        checkbox_fields.append("enable_purge")
        return checkbox_fields

    def get_global_checkbox_fields(self):
        if self.global_checkbox_fields is None:
            checkbox_fields = []
            customized_settings = {}.get('global_settings', {}).get('customized_settings', [])
            for global_var in customized_settings:
                if global_var.get('type', '') == 'checkbox':
                    checkbox_fields.append(global_var['name'])
            self.global_checkbox_fields = checkbox_fields
        return self.global_checkbox_fields

if __name__ == "__main__":
    exitcode = ModInputsalesforce_report().run(sys.argv)
    sys.exit(exitcode)
